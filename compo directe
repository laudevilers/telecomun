#include <iostream>
#include <vector>
#include <cmath>
#include <complex>
#include "norme.hpp"
#include "mur.hpp"
#include "vecteur.hpp"
#include "coefficient_reflexion.hpp"
#include "t_m.hpp"

using namespace std ;

complex <double> calcul_comp_directe(vector <murs> array, vector <double> antenne,vector <double> point_cible, complex <double> z_m, complex <double> gamma, double epsr,double beta){
    double l = 0.15 ;
    complex <double> beta2(0.0,beta);
    vector <double> vec_direct = {point_cible[0]-antenne[0],point_cible[1]-antenne[1]} ;
    for (int i = 0 ; i<3 ; i++) { //iteration sur tous les murs 
    vector <double> point = intersection(i, vec_direct, antenne, array);  
    //cout << "point d'intersection " << point[0] << " " << point[1] << endl ;
    if (point[0] != 0 && point[1] != 0) {	
    double norm_vec = norm(vec_direct);
    complex <double> gamma_perp3 = reflexion(i,vec_direct, z_m, epsr,array);  //CREATION FCT (i, array, antenne, point_cible, z_m, gamma, epsr, beta)
    complex <double> TM = t_m(i,gamma_perp3, gamma, beta, epsr, vec_direct,l, array);
    complex <double> champs_direct = TM*sqrt(60*1.64e-3)*exp(-beta2*norm_vec)/norm_vec ;
    cout << "Lchamps_direct est " << champs_direct << endl ; 
     }
      }
      }
